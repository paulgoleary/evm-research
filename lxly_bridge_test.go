package evm_research

import (
	"bytes"
	"cmp"
	"encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/umbracle/ethgo/abi"
	"io"
	"math/big"
	"os"
	"sort"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/umbracle/ethgo"
	"github.com/umbracle/ethgo/jsonrpc"
)

var lxlyEVMBridgeEthMainnetAddr = ethgo.HexToAddress("0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe")
var lxlyEVMGlobalExitRootAddr = ethgo.HexToAddress("0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb")
var lxlyEVMBridgeDeployBlock = 16896718
var lxlyEVMV2UpgradeBlock = 19100076
var firstDepositEventBlock = 16898815

// var startBlock = lxlyEVMV2UpgradeBlock
var startBlock = 0 // for L2 / zkEVM

var (
	// New Ger event
	updateL1InfoTreeSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("UpdateL1InfoTree(bytes32,bytes32)")))
	l1InfoTreeEvent               = abi.MustNewEvent(`event UpdateL1InfoTree(
        bytes32 indexed mainnetExitRoot,
        bytes32 indexed rollupExitRoot
	)`)

	// PreLxLy events
	updateGlobalExitRootSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("UpdateGlobalExitRoot(bytes32,bytes32)")))
	v1GEREvent                        = abi.MustNewEvent(`event UpdateGlobalExitRoot(
        bytes32 indexed mainnetExitRoot,
        bytes32 indexed rollupExitRoot
	)`)

	// New Bridge events
	depositEventSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("BridgeEvent(uint8,uint32,address,uint32,address,uint256,bytes,uint32)"))) // Used in oldBridge as well
	depositEvent              = abi.MustNewEvent(`event BridgeEvent(
	   uint8 leafType,
	   uint32 originNetwork,
	   address originAddress,
	   uint32 destinationNetwork,
	   address destinationAddress,
	   uint256 amount,
	   bytes metadata,
	   uint32 depositCount
	)`)

	//     * @param globalIndex Global index is defined as:
	//     * | 191 bits |    1 bit     |   32 bits   |     32 bits    |
	//     * |    0     |  mainnetFlag | rollupIndex | localRootIndex |
	//     * note that only the rollup index will be used only in case the mainnet flag is 0
	//     * note that global index do not assert the unused bits to 0.
	//     * This means that when synching the events, the globalIndex must be decoded the same way that in the Smart contract
	//     * to avoid possible synch attacks

	claimEventSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("ClaimEvent(uint256,uint32,address,address,uint256)")))
	claimEvent              = abi.MustNewEvent(`event ClaimEvent(
        uint256 globalIndex,
        uint32 originNetwork,
        address originAddress,
        address destinationAddress,
        uint256 amount
	)`)

	// Old Bridge events
	oldClaimEventSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("ClaimEvent(uint32,uint32,address,address,uint256)")))
	oldClaimEvent              = abi.MustNewEvent(`event ClaimEvent(
        uint32 index,
        uint32 originNetwork,
        address originAddress,
        address destinationAddress,
        uint256 amount
	)`)

	// Old Bridge events
	verifyBatchesEtrogSignatureHash = ethgo.Hash(ethgo.Keccak256([]byte("VerifyBatches(uint64,bytes32,address)")))
	verifyBatchesEtrogEvent         = abi.MustNewEvent(`event VerifyBatches(
        uint64 indexed numBatch,
        bytes32 stateRoot,
        address indexed aggregator
    )`)
)

const (
	BridgeEventL1InfoTree = iota
	BridgeEventV1GER
	BridgeEventDeposit
	BridgeEventV2Claim
	BridgeEventV1Claim
	BridgeEventVerifyBatchesEtrog
)

var (
	bridgeEventTypeMap = map[ethgo.Hash]int{
		l1InfoTreeEvent.ID():         BridgeEventL1InfoTree,
		v1GEREvent.ID():              BridgeEventV1GER,
		depositEvent.ID():            BridgeEventDeposit,
		claimEvent.ID():              BridgeEventV2Claim,
		oldClaimEvent.ID():           BridgeEventV1Claim,
		verifyBatchesEtrogEvent.ID(): BridgeEventVerifyBatchesEtrog,
	}

	bridgeEventParseMap = map[int]func(log *ethgo.Log) (map[string]interface{}, error){
		BridgeEventL1InfoTree:         l1InfoTreeEvent.ParseLog,
		BridgeEventV1GER:              v1GEREvent.ParseLog,
		BridgeEventDeposit:            depositEvent.ParseLog,
		BridgeEventV2Claim:            claimEvent.ParseLog,
		BridgeEventV1Claim:            oldClaimEvent.ParseLog,
		BridgeEventVerifyBatchesEtrog: verifyBatchesEtrogEvent.ParseLog,
	}
)

func maybeFromLog(l *ethgo.Log) *BridgeEvent {
	if et, ok := bridgeEventTypeMap[l.Topics[0]]; !ok {
		return nil
	} else {
		data, _ := bridgeEventParseMap[et](l)
		be := BridgeEvent{
			Removed:          l.Removed,
			BlockNumber:      l.BlockNumber,
			TransactionIndex: l.TransactionIndex,
			LogIndex:         l.LogIndex,
			TransactionHash:  l.TransactionHash,
			EventType:        uint8(et),
			Data:             data,
		}
		return &be
	}
}

type BridgeEvent struct {
	Removed          bool                   `json:"removed"`
	BlockNumber      uint64                 `json:"block_number"`
	TransactionIndex uint64                 `json:"transaction_index"`
	LogIndex         uint64                 `json:"log_index"`
	TransactionHash  ethgo.Hash             `json:"transaction_hash"`
	EventType        uint8                  `json:"event_type"`
	Data             map[string]interface{} `json:"event_data"`
}

func mustToInt64(jn json.Number) int64 {
	if n, err := jn.Int64(); err != nil {
		panic("should not fail")
	} else {
		return n
	}
}

func mustToBigInt(jn json.Number) *big.Int {
	ret := new(big.Int)
	ret.SetString(jn.String(), 10)
	return ret
}

func (be BridgeEvent) toDeposit() Deposit {
	leafType := be.Data["leafType"].(json.Number)
	originNetwork := be.Data["originNetwork"].(json.Number)
	originAddress := be.Data["originAddress"].(string)
	amount := be.Data["amount"].(json.Number)
	destinationNetwork := be.Data["destinationNetwork"].(json.Number)
	destinationAddress := be.Data["destinationAddress"].(string)
	depositCount := be.Data["depositCount"].(json.Number)
	var metaBytes []byte
	if maybeMeta, ok := be.Data["metadata"].(string); ok && len(maybeMeta) > 0 {
		metaBytes, _ = base64.StdEncoding.DecodeString(maybeMeta)
	}
	dep := Deposit{
		LeafType:           uint8(mustToInt64(leafType)),
		OriginNetwork:      uint(mustToInt64(originNetwork)),
		OriginAddress:      common.HexToAddress(originAddress),
		Amount:             mustToBigInt(amount),
		DestinationNetwork: uint(mustToInt64(destinationNetwork)),
		DestinationAddress: common.HexToAddress(destinationAddress),
		DepositCount:       uint(mustToInt64(depositCount)),
		Metadata:           metaBytes,
	}
	return dep
}

func TestEventDefCompat(t *testing.T) {
	// this checks the compatibility of ethgo-based event defs and their equivalent from zkevm-bridge-service
	require.Equal(t, updateL1InfoTreeSignatureHash.Bytes(), l1InfoTreeEvent.ID().Bytes())
	require.Equal(t, updateGlobalExitRootSignatureHash.Bytes(), v1GEREvent.ID().Bytes())
	require.Equal(t, depositEventSignatureHash.Bytes(), depositEvent.ID().Bytes())
	require.Equal(t, claimEventSignatureHash.Bytes(), claimEvent.ID().Bytes())
	require.Equal(t, oldClaimEventSignatureHash.Bytes(), oldClaimEvent.ID().Bytes())
	require.Equal(t, verifyBatchesEtrogSignatureHash.Bytes(), verifyBatchesEtrogEvent.ID().Bytes())
}

func TestBridgeExtractEvents(t *testing.T) {

	ec, err := jsonrpc.NewClient(os.Getenv("ETH_URL"))
	require.NoError(t, err)

	fromBlockNum := ethgo.BlockNumber(startBlock)

	f, err := os.Create("./l2_bridge_events.ndjson")
	require.NoError(t, err)
	defer f.Close()

	cntEvent := 0
	cntMap := make(map[uint8]int)

	for {
		toBlockNum := fromBlockNum + 999

		filter := ethgo.LogFilter{
			// Address:   []ethgo.Address{lxlyEVMBridgeEthMainnetAddr, lxlyEVMGlobalExitRootAddr},
			// Topics:    topics,
			BlockHash: nil,
			From:      &fromBlockNum,
			To:        &toBlockNum,
		}

		// this seems to be the most efficient way to query ...?

		filter.Address = []ethgo.Address{lxlyEVMBridgeEthMainnetAddr}
		llBridge, err := ec.Eth().GetLogs(&filter)
		require.NoError(t, err)

		//filter.Address = []ethgo.Address{lxlyEVMGlobalExitRootAddr}
		//llGER, err := ec.Eth().GetLogs(&filter)
		//require.NoError(t, err)

		// ll := append(llBridge, llGER...)
		ll := llBridge

		fmt.Printf("queried blocks %v to %v, %v events\n", int(fromBlockNum), int(toBlockNum), len(ll))

		if len(ll) > 0 {
			for _, l := range ll {
				if maybeBridgeEvent := maybeFromLog(l); maybeBridgeEvent != nil {
					json, err := json.Marshal(maybeBridgeEvent)
					require.NoError(t, err)
					f.WriteString(string(json) + "\n")
					cntEvent++
					cntMap[maybeBridgeEvent.EventType] += 1
				}
			}
		}

		if cntEvent >= 10_000 {
			break
		}

		fromBlockNum = toBlockNum + 1
	}

	fmt.Printf("type count summary: 0: %v, 1: %v, 2: %v, 3: %v, 4: %v\n", cntMap[0], cntMap[1], cntMap[2], cntMap[3], cntMap[4])
}

func decodeFile(filePath string) (bevs []BridgeEvent, err error) {
	var f *os.File
	if f, err = os.Open(filePath); err != nil {
		return
	}

	d := json.NewDecoder(f)
	d.UseNumber()

	cnt := 0
	for {
		var be BridgeEvent
		if err = d.Decode(&be); err != nil {
			if err == io.EOF {
				err = nil
				break
			} else {
				return
			}
		} else {
			bevs = append(bevs, be)
			cnt++
		}
	}
	return
}

func processEventsSorted(ndJsonPaths []string) (ret []BridgeEvent, err error) {

	for i := range ndJsonPaths {
		var bevs []BridgeEvent
		if bevs, err = decodeFile(ndJsonPaths[i]); err != nil {
			return
		}
		ret = append(ret, bevs...)
	}

	sort.Slice(ret, func(i, j int) bool {
		switch cmp.Compare(ret[i].BlockNumber, ret[j].BlockNumber) {
		case -1:
			return true
		case 0:
			{
				switch cmp.Compare(ret[i].TransactionIndex, ret[j].TransactionIndex) {
				case -1:
					return true
				case 0:
					{
						switch cmp.Compare(ret[i].LogIndex, ret[j].LogIndex) {
						case -1:
							return true
						}
					}
				}
			}
		}
		return false
	})

	return
}

func TestBridgeProcessEvents(t *testing.T) {

	bevs, err := processEventsSorted([]string{"./bridge_events_10k.ndjson", "./bridge_events_v2_10k.ndjson"})
	require.NoError(t, err)

	checkSort := sort.SliceIsSorted(bevs, func(i, j int) bool {
		return bevs[i].BlockNumber < bevs[j].BlockNumber &&
			bevs[i].TransactionIndex < bevs[j].TransactionIndex &&
			bevs[i].LogIndex < bevs[j].LogIndex
	})
	require.True(t, checkSort)

	checkDepositCount := -1
	depositCount := 0
	for _, ev := range bevs {
		if ev.EventType == BridgeEventDeposit {
			dc, ok := ev.Data["depositCount"].(float64)
			require.True(t, ok)
			if checkDepositCount == -1 {
				checkDepositCount = int(dc)
			}
			// require.True(t, int(dc) == checkDepositCount)
			checkDepositCount++
			depositCount++
		}
	}
	fmt.Printf("found %v deposits\n", depositCount+1)
	fmt.Printf("last block found %v\n", bevs[len(bevs)-1].BlockNumber)

	originAddrMap := make(map[string]bool)
	for i := range bevs {
		switch bevs[i].EventType {
		case BridgeEventDeposit:
			{
				dep := bevs[i].toDeposit()
				originAddrMap[dep.OriginAddress.String()] = true
			}
		case BridgeEventV1GER:
		case BridgeEventL1InfoTree:
			{
			}
		}
	}

	for k, _ := range originAddrMap {
		println(k)
	}
	fmt.Printf("got %v origin addresses", len(originAddrMap))
}

// L1 Deposit
// {
//   "removed":false,
//   "block_number":16907272,
//   "transaction_index":88,
//   "log_index":169,
//   "transaction_hash":"0x329253e492296bac3786bdcb22ac36082ab4834f400dd3e1bf36184ef00bac65",
//   "event_type":2,
//   "event_data":{
//      "amount":5024999999921424,
//      "depositCount":23,
//      "destinationAddress":"0x0185fb2F27f2Acda3e2a6B8530b342333e9f22A6",
//      "destinationNetwork":1,
//      "leafType":0,
//      "metadata":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB9XcmFwcGVkIGxpcXVpZCBzdGFrZWQgRXRoZXIgMi4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGd3N0RVRIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
//      "originAddress":"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
//      "originNetwork":0
//   }
//}

// L2 Claim
// {
//   "removed":false,
//   "block_number":46,
//   "transaction_index":0,
//   "log_index":2,
//   "transaction_hash":"0xb1b9a0664e1ebe4862351001024351898943c7d5cf07193763be758383f1813c",
//   "event_type":4,
//   "event_data":{
//      "amount":5024999999921424,
//      "destinationAddress":"0x0185fb2F27f2Acda3e2a6B8530b342333e9f22A6",
//      "index":23,
//      "originAddress":"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
//      "originNetwork":0
//   }
//}

// Wrapped token on L2: 0x5D8cfF95D7A57c0BF50B30b43c7CC0D52825D4a9

// func CreateAddress2(b common.Address, salt [32]byte, inithash []byte) common.Address

//func getInithash(contractABI, contractBin string, params ...interface{}) []byte {
//	parsed, _ := abi.JSON(strings.NewReader(contractABI))
//	packedArguments, _ := parsed.Pack("", params...) // constructor params
//
//	initData := append(common.FromHex(contractBin), packedArguments...)
//	return crypto.Keccak256(initData)
//}

func CreateAddress2(b ethgo.Address, salt []byte, inithash []byte) common.Address {
	return common.BytesToAddress(ethgo.Keccak256([]byte{0xff}, b.Bytes(), salt[:], inithash)[12:])
}

// defined in the bridge contract
// bytes public constant BASE_INIT_BYTECODE_WRAPPED_TOKEN =
//
//	hex"6101006040523480156200001257600080fd5b5060405162001b6638038062001b6683398101604081905262000035916200028d565b82826003620000458382620003a1565b506004620000548282620003a1565b50503360c0525060ff811660e052466080819052620000739062000080565b60a052506200046d915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000ad6200012e565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b6060600380546200013f9062000312565b80601f01602080910402602001604051908101604052809291908181526020018280546200016d9062000312565b8015620001be5780601f106200019257610100808354040283529160200191620001be565b820191906000526020600020905b815481529060010190602001808311620001a057829003601f168201915b5050505050905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b600093810190920192909252949350505050565b600080600060608486031215620002a357600080fd5b83516001600160401b0380821115620002bb57600080fd5b620002c987838801620001de565b94506020860151915080821115620002e057600080fd5b50620002ef86828701620001de565b925050604084015160ff811681146200030757600080fd5b809150509250925092565b600181811c908216806200032757607f821691505b6020821081036200034857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039c57600081815260208120601f850160051c81016020861015620003775750805b601f850160051c820191505b81811015620003985782815560010162000383565b5050505b505050565b81516001600160401b03811115620003bd57620003bd620001c8565b620003d581620003ce845462000312565b846200034e565b602080601f8311600181146200040d5760008415620003f45750858301515b600019600386901b1c1916600185901b17855562000398565b600085815260208120601f198616915b828110156200043e578886015182559484019460019091019084016200041d565b50858210156200045d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516116aa620004bc6000396000610237015260008181610307015281816105c001526106a70152600061053a015260008181610379015261050401526116aa6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806370a08231116100d8578063a457c2d71161008c578063d505accf11610066578063d505accf1461039b578063dd62ed3e146103ae578063ffa1ad74146103f457600080fd5b8063a457c2d71461034e578063a9059cbb14610361578063cd0d00961461037457600080fd5b806395d89b41116100bd57806395d89b41146102e75780639dc29fac146102ef578063a3c573eb1461030257600080fd5b806370a08231146102915780637ecebe00146102c757600080fd5b806330adf81f1161012f5780633644e515116101145780633644e51514610261578063395093511461026957806340c10f191461027c57600080fd5b806330adf81f14610209578063313ce5671461023057600080fd5b806318160ddd1161016057806318160ddd146101bd57806320606b70146101cf57806323b872dd146101f657600080fd5b806306fdde031461017c578063095ea7b31461019a575b600080fd5b610184610430565b60405161019191906113e4565b60405180910390f35b6101ad6101a8366004611479565b6104c2565b6040519015158152602001610191565b6002545b604051908152602001610191565b6101c17f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6101ad6102043660046114a3565b6104dc565b6101c17f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610191565b6101c1610500565b6101ad610277366004611479565b61055c565b61028f61028a366004611479565b6105a8565b005b6101c161029f3660046114df565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101c16102d53660046114df565b60056020526000908152604090205481565b610184610680565b61028f6102fd366004611479565b61068f565b6103297f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b6101ad61035c366004611479565b61075e565b6101ad61036f366004611479565b61082f565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b61028f6103a9366004611501565b61083d565b6101c16103bc366004611574565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101846040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60606003805461043f906115a7565b80601f016020809104026020016040519081016040528092919081815260200182805461046b906115a7565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b5050505050905090565b6000336104d0818585610b73565b60019150505b92915050565b6000336104ea858285610d27565b6104f5858585610dfe565b506001949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610537576105324661106d565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906104d090829086906105a3908790611629565b610b73565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f546f6b656e577261707065643a3a6f6e6c794272696467653a204e6f7420506f60448201527f6c79676f6e5a6b45564d4272696467650000000000000000000000000000000060648201526084015b60405180910390fd5b61067c8282611135565b5050565b60606004805461043f906115a7565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f546f6b656e577261707065643a3a6f6e6c794272696467653a204e6f7420506f60448201527f6c79676f6e5a6b45564d427269646765000000000000000000000000000000006064820152608401610669565b61067c8282611228565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610669565b6104f58286868403610b73565b6000336104d0818585610dfe565b834211156108cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f546f6b656e577261707065643a3a7065726d69743a204578706972656420706560448201527f726d6974000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a9190866109268361163c565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610991610500565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015610a55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590610ad057508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f546f6b656e577261707065643a3a7065726d69743a20496e76616c696420736960448201527f676e6174757265000000000000000000000000000000000000000000000000006064820152608401610669565b610b678a8a8a610b73565b50505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8216610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610df85781811015610deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610669565b610df88484848403610b73565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610ea1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8216610f44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610df8565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611098610430565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b73ffffffffffffffffffffffffffffffffffffffff82166111b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610669565b80600260008282546111c49190611629565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166112cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610d1a565b600060208083528351808285015260005b81811015611411578581018301518582016040015282016113f5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461147457600080fd5b919050565b6000806040838503121561148c57600080fd5b61149583611450565b946020939093013593505050565b6000806000606084860312156114b857600080fd5b6114c184611450565b92506114cf60208501611450565b9150604084013590509250925092565b6000602082840312156114f157600080fd5b6114fa82611450565b9392505050565b600080600080600080600060e0888a03121561151c57600080fd5b61152588611450565b965061153360208901611450565b95506040880135945060608801359350608088013560ff8116811461155757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561158757600080fd5b61159083611450565b915061159e60208401611450565b90509250929050565b600181811c908216806115bb57607f821691505b6020821081036115f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104d6576104d66115fa565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361166d5761166d6115fa565b506001019056fea26469706673582212208d88fee561cff7120d381c345cfc534cef8229a272dc5809d4bbb685ad67141164736f6c63430008110033";
var BASE_INIT_BYTECODE_WRAPPED_TOKEN = "6101006040523480156200001257600080fd5b5060405162001b6638038062001b6683398101604081905262000035916200028d565b82826003620000458382620003a1565b506004620000548282620003a1565b50503360c0525060ff811660e052466080819052620000739062000080565b60a052506200046d915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000ad6200012e565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b6060600380546200013f9062000312565b80601f01602080910402602001604051908101604052809291908181526020018280546200016d9062000312565b8015620001be5780601f106200019257610100808354040283529160200191620001be565b820191906000526020600020905b815481529060010190602001808311620001a057829003601f168201915b5050505050905090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b600093810190920192909252949350505050565b600080600060608486031215620002a357600080fd5b83516001600160401b0380821115620002bb57600080fd5b620002c987838801620001de565b94506020860151915080821115620002e057600080fd5b50620002ef86828701620001de565b925050604084015160ff811681146200030757600080fd5b809150509250925092565b600181811c908216806200032757607f821691505b6020821081036200034857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039c57600081815260208120601f850160051c81016020861015620003775750805b601f850160051c820191505b81811015620003985782815560010162000383565b5050505b505050565b81516001600160401b03811115620003bd57620003bd620001c8565b620003d581620003ce845462000312565b846200034e565b602080601f8311600181146200040d5760008415620003f45750858301515b600019600386901b1c1916600185901b17855562000398565b600085815260208120601f198616915b828110156200043e578886015182559484019460019091019084016200041d565b50858210156200045d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516116aa620004bc6000396000610237015260008181610307015281816105c001526106a70152600061053a015260008181610379015261050401526116aa6000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806370a08231116100d8578063a457c2d71161008c578063d505accf11610066578063d505accf1461039b578063dd62ed3e146103ae578063ffa1ad74146103f457600080fd5b8063a457c2d71461034e578063a9059cbb14610361578063cd0d00961461037457600080fd5b806395d89b41116100bd57806395d89b41146102e75780639dc29fac146102ef578063a3c573eb1461030257600080fd5b806370a08231146102915780637ecebe00146102c757600080fd5b806330adf81f1161012f5780633644e515116101145780633644e51514610261578063395093511461026957806340c10f191461027c57600080fd5b806330adf81f14610209578063313ce5671461023057600080fd5b806318160ddd1161016057806318160ddd146101bd57806320606b70146101cf57806323b872dd146101f657600080fd5b806306fdde031461017c578063095ea7b31461019a575b600080fd5b610184610430565b60405161019191906113e4565b60405180910390f35b6101ad6101a8366004611479565b6104c2565b6040519015158152602001610191565b6002545b604051908152602001610191565b6101c17f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6101ad6102043660046114a3565b6104dc565b6101c17f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610191565b6101c1610500565b6101ad610277366004611479565b61055c565b61028f61028a366004611479565b6105a8565b005b6101c161029f3660046114df565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101c16102d53660046114df565b60056020526000908152604090205481565b610184610680565b61028f6102fd366004611479565b61068f565b6103297f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b6101ad61035c366004611479565b61075e565b6101ad61036f366004611479565b61082f565b6101c17f000000000000000000000000000000000000000000000000000000000000000081565b61028f6103a9366004611501565b61083d565b6101c16103bc366004611574565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101846040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60606003805461043f906115a7565b80601f016020809104026020016040519081016040528092919081815260200182805461046b906115a7565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b5050505050905090565b6000336104d0818585610b73565b60019150505b92915050565b6000336104ea858285610d27565b6104f5858585610dfe565b506001949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610537576105324661106d565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906104d090829086906105a3908790611629565b610b73565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f546f6b656e577261707065643a3a6f6e6c794272696467653a204e6f7420506f60448201527f6c79676f6e5a6b45564d4272696467650000000000000000000000000000000060648201526084015b60405180910390fd5b61067c8282611135565b5050565b60606004805461043f906115a7565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f546f6b656e577261707065643a3a6f6e6c794272696467653a204e6f7420506f60448201527f6c79676f6e5a6b45564d427269646765000000000000000000000000000000006064820152608401610669565b61067c8282611228565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610669565b6104f58286868403610b73565b6000336104d0818585610dfe565b834211156108cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f546f6b656e577261707065643a3a7065726d69743a204578706972656420706560448201527f726d6974000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a9190866109268361163c565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610991610500565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015610a55573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590610ad057508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610b5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f546f6b656e577261707065643a3a7065726d69743a20496e76616c696420736960448201527f676e6174757265000000000000000000000000000000000000000000000000006064820152608401610669565b610b678a8a8a610b73565b50505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8216610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610df85781811015610deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610669565b610df88484848403610b73565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610ea1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff8216610f44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610df8565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611098610430565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b73ffffffffffffffffffffffffffffffffffffffff82166111b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610669565b80600260008282546111c49190611629565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166112cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610669565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610d1a565b600060208083528351808285015260005b81811015611411578581018301518582016040015282016113f5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461147457600080fd5b919050565b6000806040838503121561148c57600080fd5b61149583611450565b946020939093013593505050565b6000806000606084860312156114b857600080fd5b6114c184611450565b92506114cf60208501611450565b9150604084013590509250925092565b6000602082840312156114f157600080fd5b6114fa82611450565b9392505050565b600080600080600080600060e0888a03121561151c57600080fd5b61152588611450565b965061153360208901611450565b95506040880135945060608801359350608088013560ff8116811461155757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561158757600080fd5b61159083611450565b915061159e60208401611450565b90509250929050565b600181811c908216806115bb57607f821691505b6020821081036115f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104d6576104d66115fa565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361166d5761166d6115fa565b506001019056fea26469706673582212208d88fee561cff7120d381c345cfc534cef8229a272dc5809d4bbb685ad67141164736f6c63430008110033"

func TestDeriveL2TokenAddr(t *testing.T) {

	//      "originAddress":"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
	//      "originNetwork":0
	// abi.packed encoding ...
	origNet := make([]byte, 4) //nolint:gomnd
	binary.BigEndian.PutUint32(origNet, uint32(0))
	origAddr := ethgo.HexToAddress("0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0")
	salt := ethgo.Keccak256(append(origNet[:], origAddr.Bytes()...))

	depositMetadata := "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB9XcmFwcGVkIGxpcXVpZCBzdGFrZWQgRXRoZXIgMi4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGd3N0RVRIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
	metaBytes, err := base64.StdEncoding.DecodeString(depositMetadata)
	require.NoError(t, err)

	initByteCodeBytes, err := hex.DecodeString(BASE_INIT_BYTECODE_WRAPPED_TOKEN)
	require.NoError(t, err)

	deriveAddr := CreateAddress2(lxlyEVMBridgeEthMainnetAddr, salt, ethgo.Keccak256(append(initByteCodeBytes, metaBytes...)))
	require.Equal(t, "0x5D8cfF95D7A57c0BF50B30b43c7CC0D52825D4a9", deriveAddr.String())
}

func TestRollupManagerEvents(t *testing.T) {
	ec, err := jsonrpc.NewClient(os.Getenv("ETH_URL"))
	require.NoError(t, err)

	// func loadArtifact(ec *jsonrpc.Client, name string, withKey ethgo.Key, addr ethgo.Address) (loaded *contract.Contract, err error) {
	// rollup manager mainnet
	// rollupManager, err := loadArtifact(ec, "", nil, ethgo.HexToAddress("0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"))

	fromBlockNum := ethgo.BlockNumber(19592227 - 2000) // tbd !!!

	toBlockNum := fromBlockNum + 1999

	filter := ethgo.LogFilter{
		// Address:   []ethgo.Address{lxlyEVMBridgeEthMainnetAddr, lxlyEVMGlobalExitRootAddr},
		// Topics:    topics,
		BlockHash: nil,
		From:      &fromBlockNum,
		To:        &toBlockNum,
	}

	filter.Address = []ethgo.Address{ethgo.HexToAddress("0x519E42c24163192Dca44CD3fBDCEBF6be9130987")}
	// filter.Address = []ethgo.Address{ethgo.HexToAddress("0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2")}
	llRollupManager, err := ec.Eth().GetLogs(&filter)
	require.NoError(t, err)

	if len(llRollupManager) > 0 {
		for _, l := range llRollupManager {
			// println(l.Topics[0].String())
			if maybeRollupEvent := maybeFromLog(l); maybeRollupEvent != nil {
				json, err := json.Marshal(maybeRollupEvent)
				require.NoError(t, err)
				println(string(json))

				rootData := maybeRollupEvent.Data["stateRoot"].([32]uint8)
				rootHash := ethgo.Hash(rootData)
				println(rootHash.String())
				println()
			}
		}
	}
}

func TestLERCalc(t *testing.T) {
	bevs, err := processEventsSorted([]string{"./bridge_events_10k.ndjson"})
	require.NoError(t, err)

	const treeHeight = 32
	frontier := make([][KeyLen]byte, treeHeight)

	arrayToHash := func(da []interface{}) ethgo.Hash {
		var h [32]byte
		for i := range da {
			h[i] = byte(mustToInt64(da[i].(json.Number)))
		}
		return ethgo.Hash(h)
	}

	var depositCount uint
	for i := range bevs {
		switch bevs[i].EventType {
		case BridgeEventDeposit:
			{
				dep := bevs[i].toDeposit()
				depHash := hashDeposit(&dep)
				require.Equal(t, depositCount, dep.DepositCount)
				depositCount = dep.DepositCount + 1
				addLeaf(depHash, frontier, depositCount, treeHeight)
			}
		case BridgeEventV1GER:
			{
				rootHash := calculateRoot(frontier, depositCount, treeHeight)
				bevsHash := bevs[i].Data["mainnetExitRoot"].([]interface{})
				if bytes.Compare(rootHash.Bytes(), arrayToHash(bevsHash).Bytes()) != 0 {
					require.Equal(t, rootHash.Bytes(), arrayToHash(bevsHash).Bytes())
				}
			}
		default: // TODO: claim event?
		}
	}
}
